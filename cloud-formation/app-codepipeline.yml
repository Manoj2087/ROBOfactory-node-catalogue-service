AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy app codepipline'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'GitHub Info'
      Parameters:
      - GitHubOwner
      - RepositoryName
      - BranchName
    - Label:
        default: 'Codebuild'
      Parameters:
      - TestMyAppBuildSpecPath
      - ProdMyAppBuildSpecPath
#Input Parameters
Parameters:
  MyAppName:
    Default: 'robofactory'
    Description: 'My App name'
    Type: String
  TestMyAppBuildSpecPath:
    Default: 'config-files/codebuild/buildspec-test.yml'
    Description: 'Location of the buildspec file in your project'
    Type: String
  ProdMyAppBuildSpecPath:
    Default: 'config-files/codebuild/buildspec-prod.yml'
    Description: 'Location of the buildspec file in your project'
    Type: String
  RepositoryName:
    Description: GitHub repository name
    Type: String
    Default: test
  BranchName:
    Description: GitHub branch name
    Type: String
    Default: master
  GitHubOwner:
    Type: String
  
#Build AWs resources
Resources:
  # Test Infra
  TestRobotCatalogueTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Join ['-', ['test', 'robot-catalogue', !Ref 'AWS::StackName']]
      AttributeDefinitions: 
        - 
          AttributeName: "R_NAME"
          AttributeType: "S"
        - 
          AttributeName: "R_TYPE"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "R_NAME"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes: 
        - 
          IndexName: 'type-index'
          KeySchema: 
            - 
              AttributeName: "R_TYPE"
              KeyType: "HASH"
          Projection: 
            NonKeyAttributes: 
              - "R_NAME"
              - "R_IMG_URL"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  TestMyAppECSRepo: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Join ['/', [!Ref MyAppName, 'test', !Ref 'AWS::StackName']]
  TestMyAppTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: dynamodb
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: '*'
            Resource: !GetAtt TestRobotCatalogueTable.Arn 
  TestMyAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions: 
        - Name: 'NodeCatalogueService'
          Command: 
            - 'run'
            - 'test'
          Environment: 
            - Name: 'MYAPP_AWS_REGION'
              Value: !Ref AWS::Region
            - Name: 'MYAPP_AWS_ENDPOINT'
              Value: !Sub 'https://dynamodb.${AWS::Region}.amazonaws.com'
            - Name: 'MYAPP_ROBOT_TABLE'
              Value: !Ref TestRobotCatalogueTable
            - Name: 'MYAPP_ROBOT_T_TYPE_INDEX'
              Value: 'type-index'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${TestMyAppECSRepo}'
          LogConfiguration: 
            LogDriver: 'awslogs'
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref TestMyAppTaskLogGroup
              awslogs-stream-prefix: 'my-app'
          PortMappings: 
            - ContainerPort: 3000
      Cpu: '256'
      Memory: '0.5GB'
      NetworkMode: 'awsvpc'
      RequiresCompatibilities: 
        - 'EC2'
      TaskRoleArn: !GetAtt TestMyAppTaskRole.Arn
  TestMyAppTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
  TestMyCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: codebuild
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
  TestMyCodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
  TestMyCodeBuildLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Ref  TestMyCodeBuildLogGroup
      LogStreamName: "MyAppLogStream"            
  TestMyCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        OverrideArtifactName: true
        Type: 'CODEPIPELINE'
      Description: 'my app codebuild'
      Environment: 
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'
        PrivilegedMode: true
        Type: 'LINUX_CONTAINER'
      LogsConfig: 
        CloudWatchLogs: 
          GroupName: !Ref  TestMyCodeBuildLogGroup
          Status: 'ENABLED'
          StreamName: !Ref TestMyCodeBuildLogStream
      ServiceRole: !Ref TestMyCodeBuildRole
      Source: 
        Type: 'CODEPIPELINE'
        BuildSpec: !Ref TestMyAppBuildSpecPath
  # Prod Infra
  ProdRobotCatalogueTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Join ['-', ['prod', 'robot-catalogue', !Ref 'AWS::StackName']]
      AttributeDefinitions: 
        - 
          AttributeName: "R_NAME"
          AttributeType: "S"
        - 
          AttributeName: "R_TYPE"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "R_NAME"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes: 
        - 
          IndexName: 
            Fn::Join:
              - '-'
              - - 'prod'
                - 'type-index'
          KeySchema: 
            - 
              AttributeName: "R_TYPE"
              KeyType: "HASH"
          Projection: 
            NonKeyAttributes: 
              - "R_NAME"
              - "R_IMG_URL"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  ProdMyAppECSRepo: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Join ['/', [!Ref MyAppName, 'prod', !Ref 'AWS::StackName']]
  ProdMyAppTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: dynamodb
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: '*'
            Resource: !GetAtt ProdRobotCatalogueTable.Arn 
  ProdMyAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions: 
        - Name: 'NodeCatalogueService'
          Command: 
            - 'run'
            - 'prod'
          Environment: 
            - Name: 'MYAPP_AWS_REGION'
              Value: !Ref AWS::Region
            - Name: 'MYAPP_AWS_ENDPOINT'
              Value: !Sub 'https://dynamodb.${AWS::Region}.amazonaws.com'
            - Name: 'MYAPP_ROBOT_TABLE'
              Value: !Ref ProdRobotCatalogueTable
            - Name: 'MYAPP_ROBOT_T_TYPE_INDEX'
              Value: 'type-index'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProdMyAppECSRepo}'
          LogConfiguration: 
            LogDriver: 'awslogs'
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref ProdMyAppTaskLogGroup
              awslogs-stream-prefix: 'my-app'
          PortMappings: 
            - ContainerPort: 3000
      Cpu: '256'
      Memory: '0.5GB'
      NetworkMode: 'awsvpc'
      RequiresCompatibilities: 
        - 'EC2'
      TaskRoleArn: !GetAtt ProdMyAppTaskRole.Arn
  ProdMyAppTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
  ProdMyCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: codebuild
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
  ProdMyCodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
  ProdMyCodeBuildLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Ref  ProdMyCodeBuildLogGroup
      LogStreamName: "MyAppLogStream"            
  ProdMyCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        OverrideArtifactName: true
        Type: 'CODEPIPELINE'
      Description: 'my app codebuild'
      Environment: 
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'
        PrivilegedMode: true
        Type: 'LINUX_CONTAINER'
      LogsConfig: 
        CloudWatchLogs: 
          GroupName: !Ref  ProdMyCodeBuildLogGroup
          Status: 'ENABLED'
          StreamName: !Ref ProdMyCodeBuildLogStream
      ServiceRole: !Ref ProdMyCodeBuildRole
      Source: 
        Type: 'CODEPIPELINE'
        BuildSpec: !Ref ProdMyAppBuildSpecPath
  # Share
  MyAppCodePipelineS3ArtifactStore:
    Type: AWS::S3::Bucket
  MyCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: codepipeline
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
  MyAppCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore: 
        Location: !Ref MyAppCodePipelineS3ArtifactStore
        Type: 'S3'
      RoleArn: !GetAtt MyCodePipelineRole.Arn
      Stages: 
        - Name: 'Source'
          # https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers
          Actions:
            - Name: ApplicationSource
              ActionTypeId: 
                Category: 'Source'
                Owner: 'ThirdParty'
                Provider: 'GitHub'
                Version: '1'
              Configuration: 
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                PollForSourceChanges: false
                Branch: !Ref BranchName
                OAuthToken: '{{resolve:secretsmanager:my-app-secrets:SecretString:git-personal-access-token}}'
              InputArtifacts: []
              OutputArtifacts: 
                - Name: SourceArtifact
              RunOrder: 1
        - Name: 'TestBuild'
          Actions:
            - Name: BuildContainer
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref TestMyCodeBuild
                PrimarySource: SourceArtifact
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name":"REPOSITORY_URI",
                      "value":"${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${TestMyAppECSRepo}",
                      "type":"PLAINTEXT"
                    }
                  ]
              OutputArtifacts:
                - Name: TestBuildArtifact
              InputArtifacts:
                - Name: SourceArtifact
              RunOrder: 2
        - Name: 'ProdBuild'
          Actions:
            - Name: BuildContainer
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref TestMyCodeBuild
                PrimarySource: SourceArtifact
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name":"REPOSITORY_URI",
                      "value":"${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProdMyAppECSRepo}",
                      "type":"PLAINTEXT"
                    }
                  ]
              OutputArtifacts:
                - Name: ProdBuildArtifact
              InputArtifacts:
                - Name: SourceArtifact
              RunOrder: 3
  MyAppGitHubWebHook:
    Type: AWS::CodePipeline::Webhook
    Properties: 
      Authentication: 'GITHUB_HMAC'
      AuthenticationConfiguration: 
        SecretToken: '{{resolve:secretsmanager:my-app-secrets:SecretString:git-personal-access-token}}'
      Filters: 
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
      RegisterWithThirdParty: true
      TargetAction: 'ApplicationSource'
      TargetPipeline: !Ref MyAppCodePipeline
      TargetPipelineVersion: !GetAtt MyAppCodePipeline.Version

Outputs:
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'